# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Created by: https://trello.com/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from trello_python_sdk import schemas  # noqa: F401


class Members(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            avatarSource = schemas.StrSchema
            bio = schemas.StrSchema
            fullName = schemas.StrSchema
            initials = schemas.StrSchema
            prefs_color_blind = schemas.StrSchema
            prefs_locale = schemas.StrSchema
            prefs_minutes_between_summaries = schemas.StrSchema
            username = schemas.StrSchema
            __annotations__ = {
                "avatarSource": avatarSource,
                "bio": bio,
                "fullName": fullName,
                "initials": initials,
                "prefs/colorBlind": prefs_color_blind,
                "prefs/locale": prefs_locale,
                "prefs/minutesBetweenSummaries": prefs_minutes_between_summaries,
                "username": username,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatarSource"]) -> MetaOapg.properties.avatarSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bio"]) -> MetaOapg.properties.bio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initials"]) -> MetaOapg.properties.initials: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/colorBlind"]) -> MetaOapg.properties.prefs_color_blind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/locale"]) -> MetaOapg.properties.prefs_locale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/minutesBetweenSummaries"]) -> MetaOapg.properties.prefs_minutes_between_summaries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatarSource", "bio", "fullName", "initials", "prefs/colorBlind", "prefs/locale", "prefs/minutesBetweenSummaries", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatarSource"]) -> typing.Union[MetaOapg.properties.avatarSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bio"]) -> typing.Union[MetaOapg.properties.bio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullName"]) -> typing.Union[MetaOapg.properties.fullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initials"]) -> typing.Union[MetaOapg.properties.initials, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/colorBlind"]) -> typing.Union[MetaOapg.properties.prefs_color_blind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/locale"]) -> typing.Union[MetaOapg.properties.prefs_locale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/minutesBetweenSummaries"]) -> typing.Union[MetaOapg.properties.prefs_minutes_between_summaries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatarSource", "bio", "fullName", "initials", "prefs/colorBlind", "prefs/locale", "prefs/minutesBetweenSummaries", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        avatarSource: typing.Union[MetaOapg.properties.avatarSource, str, schemas.Unset] = schemas.unset,
        bio: typing.Union[MetaOapg.properties.bio, str, schemas.Unset] = schemas.unset,
        fullName: typing.Union[MetaOapg.properties.fullName, str, schemas.Unset] = schemas.unset,
        initials: typing.Union[MetaOapg.properties.initials, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Members':
        return super().__new__(
            cls,
            *args,
            avatarSource=avatarSource,
            bio=bio,
            fullName=fullName,
            initials=initials,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )
