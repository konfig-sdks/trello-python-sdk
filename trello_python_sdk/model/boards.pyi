# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Created by: https://trello.com/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from trello_python_sdk import schemas  # noqa: F401


class Boards(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            closed = schemas.StrSchema
            desc = schemas.StrSchema
            idBoardSource = schemas.StrSchema
            idOrganization = schemas.StrSchema
            keepFromSource = schemas.StrSchema
            label_names_blue = schemas.StrSchema
            label_names_green = schemas.StrSchema
            label_names_orange = schemas.StrSchema
            label_names_purple = schemas.StrSchema
            label_names_red = schemas.StrSchema
            label_names_yellow = schemas.StrSchema
            name = schemas.StrSchema
            powerUps = schemas.StrSchema
            prefs_background = schemas.StrSchema
            prefs_calendar_feed_enabled = schemas.StrSchema
            prefs_card_aging = schemas.StrSchema
            prefs_card_covers = schemas.StrSchema
            prefs_comments = schemas.StrSchema
            prefs_invitations = schemas.StrSchema
            prefs_permission_level = schemas.StrSchema
            prefs_self_join = schemas.StrSchema
            prefs_voting = schemas.StrSchema
            prefs_background = schemas.StrSchema
            prefs_cardAging = schemas.StrSchema
            prefs_cardCovers = schemas.StrSchema
            prefs_comments = schemas.StrSchema
            prefs_invitations = schemas.StrSchema
            prefs_permissionLevel = schemas.StrSchema
            prefs_selfJoin = schemas.StrSchema
            prefs_voting = schemas.StrSchema
            subscribed = schemas.StrSchema
            __annotations__ = {
                "closed": closed,
                "desc": desc,
                "idBoardSource": idBoardSource,
                "idOrganization": idOrganization,
                "keepFromSource": keepFromSource,
                "labelNames/blue": label_names_blue,
                "labelNames/green": label_names_green,
                "labelNames/orange": label_names_orange,
                "labelNames/purple": label_names_purple,
                "labelNames/red": label_names_red,
                "labelNames/yellow": label_names_yellow,
                "name": name,
                "powerUps": powerUps,
                "prefs/background": prefs_background,
                "prefs/calendarFeedEnabled": prefs_calendar_feed_enabled,
                "prefs/cardAging": prefs_card_aging,
                "prefs/cardCovers": prefs_card_covers,
                "prefs/comments": prefs_comments,
                "prefs/invitations": prefs_invitations,
                "prefs/permissionLevel": prefs_permission_level,
                "prefs/selfJoin": prefs_self_join,
                "prefs/voting": prefs_voting,
                "prefs_background": prefs_background,
                "prefs_cardAging": prefs_cardAging,
                "prefs_cardCovers": prefs_cardCovers,
                "prefs_comments": prefs_comments,
                "prefs_invitations": prefs_invitations,
                "prefs_permissionLevel": prefs_permissionLevel,
                "prefs_selfJoin": prefs_selfJoin,
                "prefs_voting": prefs_voting,
                "subscribed": subscribed,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idBoardSource"]) -> MetaOapg.properties.idBoardSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idOrganization"]) -> MetaOapg.properties.idOrganization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keepFromSource"]) -> MetaOapg.properties.keepFromSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelNames/blue"]) -> MetaOapg.properties.label_names_blue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelNames/green"]) -> MetaOapg.properties.label_names_green: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelNames/orange"]) -> MetaOapg.properties.label_names_orange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelNames/purple"]) -> MetaOapg.properties.label_names_purple: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelNames/red"]) -> MetaOapg.properties.label_names_red: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelNames/yellow"]) -> MetaOapg.properties.label_names_yellow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["powerUps"]) -> MetaOapg.properties.powerUps: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/background"]) -> MetaOapg.properties.prefs_background: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/calendarFeedEnabled"]) -> MetaOapg.properties.prefs_calendar_feed_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/cardAging"]) -> MetaOapg.properties.prefs_card_aging: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/cardCovers"]) -> MetaOapg.properties.prefs_card_covers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/comments"]) -> MetaOapg.properties.prefs_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/invitations"]) -> MetaOapg.properties.prefs_invitations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/permissionLevel"]) -> MetaOapg.properties.prefs_permission_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/selfJoin"]) -> MetaOapg.properties.prefs_self_join: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs/voting"]) -> MetaOapg.properties.prefs_voting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs_background"]) -> MetaOapg.properties.prefs_background: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs_cardAging"]) -> MetaOapg.properties.prefs_cardAging: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs_cardCovers"]) -> MetaOapg.properties.prefs_cardCovers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs_comments"]) -> MetaOapg.properties.prefs_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs_invitations"]) -> MetaOapg.properties.prefs_invitations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs_permissionLevel"]) -> MetaOapg.properties.prefs_permissionLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs_selfJoin"]) -> MetaOapg.properties.prefs_selfJoin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefs_voting"]) -> MetaOapg.properties.prefs_voting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribed"]) -> MetaOapg.properties.subscribed: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["closed", "desc", "idBoardSource", "idOrganization", "keepFromSource", "labelNames/blue", "labelNames/green", "labelNames/orange", "labelNames/purple", "labelNames/red", "labelNames/yellow", "name", "powerUps", "prefs/background", "prefs/calendarFeedEnabled", "prefs/cardAging", "prefs/cardCovers", "prefs/comments", "prefs/invitations", "prefs/permissionLevel", "prefs/selfJoin", "prefs/voting", "prefs_background", "prefs_cardAging", "prefs_cardCovers", "prefs_comments", "prefs_invitations", "prefs_permissionLevel", "prefs_selfJoin", "prefs_voting", "subscribed", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed"]) -> typing.Union[MetaOapg.properties.closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desc"]) -> typing.Union[MetaOapg.properties.desc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idBoardSource"]) -> typing.Union[MetaOapg.properties.idBoardSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idOrganization"]) -> typing.Union[MetaOapg.properties.idOrganization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keepFromSource"]) -> typing.Union[MetaOapg.properties.keepFromSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelNames/blue"]) -> typing.Union[MetaOapg.properties.label_names_blue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelNames/green"]) -> typing.Union[MetaOapg.properties.label_names_green, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelNames/orange"]) -> typing.Union[MetaOapg.properties.label_names_orange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelNames/purple"]) -> typing.Union[MetaOapg.properties.label_names_purple, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelNames/red"]) -> typing.Union[MetaOapg.properties.label_names_red, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelNames/yellow"]) -> typing.Union[MetaOapg.properties.label_names_yellow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["powerUps"]) -> typing.Union[MetaOapg.properties.powerUps, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/background"]) -> typing.Union[MetaOapg.properties.prefs_background, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/calendarFeedEnabled"]) -> typing.Union[MetaOapg.properties.prefs_calendar_feed_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/cardAging"]) -> typing.Union[MetaOapg.properties.prefs_card_aging, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/cardCovers"]) -> typing.Union[MetaOapg.properties.prefs_card_covers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/comments"]) -> typing.Union[MetaOapg.properties.prefs_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/invitations"]) -> typing.Union[MetaOapg.properties.prefs_invitations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/permissionLevel"]) -> typing.Union[MetaOapg.properties.prefs_permission_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/selfJoin"]) -> typing.Union[MetaOapg.properties.prefs_self_join, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs/voting"]) -> typing.Union[MetaOapg.properties.prefs_voting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs_background"]) -> typing.Union[MetaOapg.properties.prefs_background, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs_cardAging"]) -> typing.Union[MetaOapg.properties.prefs_cardAging, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs_cardCovers"]) -> typing.Union[MetaOapg.properties.prefs_cardCovers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs_comments"]) -> typing.Union[MetaOapg.properties.prefs_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs_invitations"]) -> typing.Union[MetaOapg.properties.prefs_invitations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs_permissionLevel"]) -> typing.Union[MetaOapg.properties.prefs_permissionLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs_selfJoin"]) -> typing.Union[MetaOapg.properties.prefs_selfJoin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefs_voting"]) -> typing.Union[MetaOapg.properties.prefs_voting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribed"]) -> typing.Union[MetaOapg.properties.subscribed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["closed", "desc", "idBoardSource", "idOrganization", "keepFromSource", "labelNames/blue", "labelNames/green", "labelNames/orange", "labelNames/purple", "labelNames/red", "labelNames/yellow", "name", "powerUps", "prefs/background", "prefs/calendarFeedEnabled", "prefs/cardAging", "prefs/cardCovers", "prefs/comments", "prefs/invitations", "prefs/permissionLevel", "prefs/selfJoin", "prefs/voting", "prefs_background", "prefs_cardAging", "prefs_cardCovers", "prefs_comments", "prefs_invitations", "prefs_permissionLevel", "prefs_selfJoin", "prefs_voting", "subscribed", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        closed: typing.Union[MetaOapg.properties.closed, str, schemas.Unset] = schemas.unset,
        desc: typing.Union[MetaOapg.properties.desc, str, schemas.Unset] = schemas.unset,
        idBoardSource: typing.Union[MetaOapg.properties.idBoardSource, str, schemas.Unset] = schemas.unset,
        idOrganization: typing.Union[MetaOapg.properties.idOrganization, str, schemas.Unset] = schemas.unset,
        keepFromSource: typing.Union[MetaOapg.properties.keepFromSource, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        powerUps: typing.Union[MetaOapg.properties.powerUps, str, schemas.Unset] = schemas.unset,
        prefs_background: typing.Union[MetaOapg.properties.prefs_background, str, schemas.Unset] = schemas.unset,
        prefs_cardAging: typing.Union[MetaOapg.properties.prefs_cardAging, str, schemas.Unset] = schemas.unset,
        prefs_cardCovers: typing.Union[MetaOapg.properties.prefs_cardCovers, str, schemas.Unset] = schemas.unset,
        prefs_comments: typing.Union[MetaOapg.properties.prefs_comments, str, schemas.Unset] = schemas.unset,
        prefs_invitations: typing.Union[MetaOapg.properties.prefs_invitations, str, schemas.Unset] = schemas.unset,
        prefs_permissionLevel: typing.Union[MetaOapg.properties.prefs_permissionLevel, str, schemas.Unset] = schemas.unset,
        prefs_selfJoin: typing.Union[MetaOapg.properties.prefs_selfJoin, str, schemas.Unset] = schemas.unset,
        prefs_voting: typing.Union[MetaOapg.properties.prefs_voting, str, schemas.Unset] = schemas.unset,
        subscribed: typing.Union[MetaOapg.properties.subscribed, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Boards':
        return super().__new__(
            cls,
            *args,
            closed=closed,
            desc=desc,
            idBoardSource=idBoardSource,
            idOrganization=idOrganization,
            keepFromSource=keepFromSource,
            name=name,
            powerUps=powerUps,
            prefs_background=prefs_background,
            prefs_cardAging=prefs_cardAging,
            prefs_cardCovers=prefs_cardCovers,
            prefs_comments=prefs_comments,
            prefs_invitations=prefs_invitations,
            prefs_permissionLevel=prefs_permissionLevel,
            prefs_selfJoin=prefs_selfJoin,
            prefs_voting=prefs_voting,
            subscribed=subscribed,
            _configuration=_configuration,
            **kwargs,
        )
